const startBtn = document.getElementById('start-btn');
const intro = document.getElementById('intro');
const gameContent = document.getElementById('game-content');
const itemsPool = document.getElementById('items-pool');
const backpack = document.getElementById('backpack-items');
const currentWeightStat = document.getElementById('current-weight');
const currentValueStat = document.getElementById('current-value');

const checkBtn = document.getElementById('check-btn');
const nextLevelBtn = document.getElementById('next-level-btn');
const levelTitle = document.getElementById('level-title');
const capacitySpan = document.getElementById('capacity');
const resultMessage = document.getElementById('result-message');

const ITEM_TEMPLATES = [
    { name: "–ó–æ–ª–æ—Ç–æ–π —Å–∞–º–æ—Ä–æ–¥–æ–∫", icon: "‚ú®" },
    { name: "–î—Ä–µ–≤–Ω–∏–π —Å–≤–∏—Ç–æ–∫", icon: "üìú" },
    { name: "–•—Ä—É—Å—Ç–∞–ª—å–Ω—ã–π —à–∞—Ä", icon: "üîÆ" },
    { name: "–ú–µ—á –±–æ–≥–æ–º–æ–ª–∞", icon: "Ô∏è‚öîÔ∏è" },
    { name: "–ö–æ–±–∞–ª—å—Ç–æ–≤—ã–π —â–∏—Ç", icon: "üõ°Ô∏è" },
    { name: "–≠–ª–∏–∫—Å–∏—Ä –∂–∏–∑–Ω–∏", icon: "üß™" },
    { name: "–ö–∞—Ä—Ç–∞ —Å–æ–∫—Ä–æ–≤–∏—â", icon: "üó∫Ô∏è" },
    { name: "–î—Ä–∞–∫–æ–Ω—å–µ —è–π—Ü–æ", icon: "ü•ö" },
    { name: "–ü–µ—Ä–æ –§–µ–Ω–∏–∫—Å–∞", icon: "üê¶‚Äçüî•" },
    { name: "–°–µ—Ä–¥—Ü–µ –º–æ—Ä—è", icon: "üíô" },
    { name: "–ì—Ä–æ–∑–æ–≤–æ–π –º–æ–ª–æ—Ç", icon: "üî®" },
    { name: "–î—Ä–∞–∫–æ–Ω—å—è —á–µ—à—É—è", icon: "üêâ" },
    { name: "–ó–æ–ª–æ—Ç–∞—è –∫–æ—Ä–æ–Ω–∞", icon: "üëë" },
    { name: "–î—Ä–µ–≤–Ω—è—è –≤–∞–∑–∞", icon: "üè∫" },
	{ name: "–õ—É–∫ –ê—Ä—Ç–µ–º–∏–¥—ã", icon: "üèπ" },
	{ name: "–†–æ–∑–∞ –≤–µ—Ç—Ä–æ–≤", icon: "üåπ" },
	{ name: "–ú–∞—Å–∫–∞ —Ç–∞–π–Ω", icon: "üé≠" },
	{ name: "–ñ–µ–∑–ª –ø—Ä–∏—Ä–æ–¥—ã", icon: "üåø" },
	{ name: "–ö–∏–Ω–∂–∞–ª —Ç–µ–Ω–∏", icon: "üó°Ô∏è" },
	{ name: "–°–ª–µ–∑–∞ –Ω–µ–±–µ—Å", icon: "üíß" },
	{ name: "–î—Ä–µ–≤–Ω–∏–π –ø–ª–æ–¥", icon: "üå±" },
	{ name: "–£–ø–∞–≤—à–∞—è –∑–≤–µ–∑–¥–∞", icon: "‚≠ê" },
	{ name: "–†–∞–∫–æ–≤–∏–Ω–∞ –ù–∞—É—Ç–∏–ª—É—Å–∞", icon: "üêö" },
	{ name: "–õ—É–Ω–Ω—ã–π –∫–∞–º–µ–Ω—å", icon: "üåë" },
	{ name: "–•—Ä—É—Å—Ç–∞–ª—å–Ω—ã–µ –∫—Ä—ã–ª—å—è", icon: "ü¶ã" },
	{ name: "–°–µ—Ä–µ–±—Ä—è–Ω–æ–µ –∫–æ–ª—å—Ü–æ", icon: "üíç" },
	{ name: "–ö–∞–º–µ–Ω–Ω—ã–π –∏–¥–æ–ª", icon: "üóø" },
    { name: "–ê–º—É–ª–µ—Ç —É–¥–∞—á–∏", icon: "üçÄ" },
	{ name: "–í—Å–µ–≤–∏–¥—è—â–µ–µ –æ–∫–æ", icon: "üëÅÔ∏è" },
	{ name: "–ú–æ—Ä—Å–∫–æ–π —Ç—Ä–µ–±—É–∑–µ—Ü", icon: "üî±" },
    { name: "–†–æ–≥ –µ–¥–∏–Ω–æ—Ä–æ–≥–∞", icon: "ü¶Ñ" }
	
];

const LEVEL_CONFIG = [
    { capacity: 10, numItems: 4 },
	{ capacity: 15, numItems: 5 },
    { capacity: 15, numItems: 6 },
	{ capacity: 20, numItems: 7 },
	{ capacity: 55, numItems: 8 },
];

let currentLevel = 1;
let backpackCapacity;
let optimalValue = 0;
let moving = null;

function generateItems(numItems) {

    itemsPool.innerHTML = '';
	backpack.innerHTML = '';
	
	const shuffledTemplates = ITEM_TEMPLATES.sort(() => 0.5 - Math.random());
	const levelItems = shuffledTemplates.slice(0, numItems);
	
    levelItems.forEach((template, index) => {
        const itemElement = document.createElement('div');
        itemElement.className = 'item';
		itemElement.id = 'item-' + index;
        itemElement.draggable = true; 
		
        const randomWeight = Math.floor((Math.random() * (backpackCapacity / 2) + 1));
        const randomValue = Math.floor(Math.random() * 451) + 50;

        itemElement.innerHTML = `
            <div class="item-icon">${template.icon}</div>
            <div class="item-details">
                <strong>${template.name}</strong><br>
                –í–µ—Å: ${randomWeight} –∫–≥<br>
                –°—Ç–æ–∏–º–æ—Å—Ç—å: ${randomValue} üí≤
            </div>
        `;
        
        itemsPool.appendChild(itemElement);
    });
	setupDragAndDrop();
}

function updateStats() {
	let totalWeight = 0;
	let totalValue = 0;
    const itemsInBackpack = backpack.querySelectorAll('.item');

    itemsInBackpack.forEach(item => {
        const detailsText = item.querySelector('.item-details').textContent;
        
        const weightMatch = detailsText.match(/–í–µ—Å: (\d+)/); 
        const valueMatch = detailsText.match(/–°—Ç–æ–∏–º–æ—Å—Ç—å: (\d+)/);

        if (weightMatch) {
            totalWeight += parseInt(weightMatch[1], 10);
        }
        if (valueMatch) {
            totalValue += parseInt(valueMatch[1], 10);
        }
    });

    currentWeightStat.textContent = totalWeight;
    currentValueStat.textContent = totalValue;
	return totalWeight; 
}



function setupDragAndDrop() {
    const items = document.querySelectorAll('.item');

    items.forEach(item => {
        item.addEventListener('dragstart', (event) => {
            event.dataTransfer.setData('text/plain', event.target.id);
        });

        item.addEventListener('touchstart', (event) => {
            moving = item;
        });
    });

    const dropzones = [itemsPool, backpack];

    dropzones.forEach(zone => {
        zone.addEventListener('dragover', (event) => {
            event.preventDefault();
        });

        zone.addEventListener('drop', (event) => {
            event.preventDefault();
            
            const id = event.dataTransfer.getData('text/plain');
            const draggableElement = document.getElementById(id);

            const dropzone = event.target.closest('.dropzone');
            if (dropzone === backpack) {
                const itemDetails = draggableElement.querySelector('.item-details').textContent;
                const itemWeightMatch = itemDetails.match(/–í–µ—Å: (\d+)/);
                const itemWeight = itemWeightMatch ? parseInt(itemWeightMatch[1], 10) : 0;

                const currentBackpackWeight = updateStats();
                
                if (currentBackpackWeight + itemWeight <= backpackCapacity) {
                    dropzone.appendChild(draggableElement);
                }
            } else {
                dropzone.appendChild(draggableElement);
            }

            updateStats();
        });
    });
}

function startLevel() {
    resultMessage.classList.add('hidden');
    nextLevelBtn.classList.add('hidden');
    checkBtn.classList.remove('hidden');

    const config = LEVEL_CONFIG[currentLevel - 1];
    backpackCapacity = config.capacity;

    levelTitle.textContent = `–£—Ä–æ–≤–µ–Ω—å ${currentLevel}`;
    capacitySpan.textContent = backpackCapacity;

    generateItems(config.numItems);
	updateStats();
	solveKnapsack();
}

function solveKnapsack() {
    const availableItems = [];
    itemsPool.querySelectorAll('.item').forEach(item => {
        const detailsText = item.querySelector('.item-details').textContent;
        const weightMatch = detailsText.match(/–í–µ—Å: (\d+)/);
        const valueMatch = detailsText.match(/–°—Ç–æ–∏–º–æ—Å—Ç—å: (\d+)/);

        if (weightMatch && valueMatch) {
            availableItems.push({
                weight: parseInt(weightMatch[1], 10),
                value: parseInt(valueMatch[1], 10)
            });
        }
    });

    const n = availableItems.length;
    const W = backpackCapacity;

    const dp = Array(n + 1).fill(0).map(() => Array(W + 1).fill(0));

    for (let i = 1; i <= n; i++) {
        const currentItem = availableItems[i - 1];
        for (let w = 1; w <= W; w++) {
            if (currentItem.weight > w) {
                dp[i][w] = dp[i - 1][w];
            } else {

                dp[i][w] = Math.max(
                    dp[i - 1][w],
                    currentItem.value + dp[i - 1][w - currentItem.weight]
                );
            }
        }
    }

    const maxVal = dp[n][W];
    optimalValue = maxVal;
}

function showVictoryScreen() {
    gameContent.classList.add('hidden');
    checkBtn.classList.add('hidden');
    resultMessage.textContent = "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –ø—Ä–æ—à–ª–∏ –∏–≥—Ä—É!";
    resultMessage.classList.remove('hidden');
    startBtn.textContent = '–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ';
    startBtn.classList.remove('hidden');
}


startBtn.addEventListener('click', () => {
    intro.classList.add('hidden');
    startBtn.classList.add('hidden');
    gameContent.classList.remove('hidden');

    currentLevel = 1;
    startLevel();
});

checkBtn.addEventListener('click', () => {
    const playerValue = parseInt(currentValueStat.textContent, 10);

    checkBtn.classList.add('hidden');
    
    if (playerValue === optimalValue) {
        
        if (currentLevel < LEVEL_CONFIG.length) {
            resultMessage.textContent = `–û—Ç–ª–∏—á–Ω–æ! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã–≥–æ–¥–∞ ${optimalValue} üí≤ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!`;
            resultMessage.classList.remove('hidden');
            nextLevelBtn.classList.remove('hidden');
        } else {
            showVictoryScreen();
        }
    } else {

        resultMessage.textContent = `–ù–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –¢—ã –Ω–∞–±—Ä–∞–ª ${playerValue} üí≤, –∞ –º–æ–≥ –±—ã ${optimalValue} üí≤. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!`;
        resultMessage.classList.remove('hidden');

        setTimeout(() => {
            startLevel(); 
        }, 5000);
    }
});

nextLevelBtn.addEventListener('click', () => {
    currentLevel++;
    startLevel();
});

document.addEventListener("touchmove", (event) => {
    if (moving) {
        event.preventDefault();
        event.stopPropagation();
        let touch = event.targetTouches[0];
        moving.style.position = "absolute";
        moving.style.left = `${touch.pageX}px`;
        moving.style.top = `${touch.pageY}px`;
    }
})

document.addEventListener('touchend', (event) => {
    if (moving) {
        moving.style.position = "static";
        let touch = event.changedTouches[0];
        let coordBackpack = backpack.getBoundingClientRect().left;

        if (coordBackpack < touch.pageX) {
            const itemDetails = moving.textContent;
            const itemWeightMatch = itemDetails.match(/–í–µ—Å: (\d+)/);
            const itemWeight = itemWeightMatch ? parseInt(itemWeightMatch[1], 10) : 0;

            const currentBackpackWeight = updateStats();

            if (currentBackpackWeight + itemWeight <= backpackCapacity) {
                backpack.appendChild(moving);
            }
        }
        
        else {
            itemsPool.appendChild(moving);
        }
        updateStats();
        moving = null;
    }
});