const startBtn = document.getElementById('start-btn');
const intro = document.getElementById('intro');
const gameContent = document.getElementById('game-content');
const itemsPool = document.getElementById('items-pool');
const backpack = document.getElementById('backpack-items');

const checkBtn = document.getElementById('check-btn');
const nextLevelBtn = document.getElementById('next-level-btn');
const levelTitle = document.getElementById('level-title');
const capacitySpan = document.getElementById('capacity');
const resultMessage = document.getElementById('result-message');

const ITEM_TEMPLATES = [
    { name: "–ó–æ–ª–æ—Ç–æ–π —Å–∞–º–æ—Ä–æ–¥–æ–∫", icon: "‚ú®" },
    { name: "–î—Ä–µ–≤–Ω–∏–π —Å–≤–∏—Ç–æ–∫", icon: "üìú" },
    { name: "–•—Ä—É—Å—Ç–∞–ª—å–Ω—ã–π —à–∞—Ä", icon: "üîÆ" },
    { name: "–ú–µ—á –±–æ–≥–æ–º–æ–ª–∞", icon: "Ô∏è‚öîÔ∏è" },
    { name: "–ö–æ–±–∞–ª—å—Ç–æ–≤—ã–π —â–∏—Ç", icon: "üõ°Ô∏è" },
    { name: "–≠–ª–∏–∫—Å–∏—Ä –∂–∏–∑–Ω–∏", icon: "üß™" },
    { name: "–ö–∞—Ä—Ç–∞ —Å–æ–∫—Ä–æ–≤–∏—â", icon: "üó∫Ô∏è" },
    { name: "–î—Ä–∞–∫–æ–Ω—å–µ —è–π—Ü–æ", icon: "ü•ö" },
    { name: "–ü–µ—Ä–æ –ø–µ–≥–∞—Å–∞", icon: "ü™∂" },
    { name: "–°–µ—Ä–¥—Ü–µ –º–æ—Ä—è", icon: "üíô" },
    { name: "–ì—Ä–æ–∑–æ–≤–æ–π –º–æ–ª–æ—Ç", icon: "üî®" },
    { name: "–î—Ä–∞–∫–æ–Ω—å—è —á–µ—à—É—è", icon: "üêâ" },
    { name: "–ó–æ–ª–æ—Ç–∞—è –∫–æ—Ä–æ–Ω–∞", icon: "üëë" },
    { name: "–î—Ä–µ–≤–Ω—è—è –≤–∞–∑–∞", icon: "üè∫" },
    { name: "–ê–º—É–ª–µ—Ç —É–¥–∞—á–∏", icon: "üçÄ" }
	
];

const LEVEL_CONFIG = [
    { capacity: 10, numItems: 4 },
    { capacity: 15, numItems: 7 },
    { capacity: 20, numItems: 10 } 
];

let currentLevel = 1;
let backpackCapacity;

function generateItems(numItems) {
    itemsPool.innerHTML = '';
	backpack.innerHTML = '';
	
	const shuffledTemplates = ITEM_TEMPLATES.sort(() => 0.5 - Math.random());
	const levelItems = shuffledTemplates.slice(0, numItems);
	
    levelItems.forEach((template, index) => {
        const itemElement = document.createElement('div');
        itemElement.className = 'item';
		itemElement.id = 'item-' + index;
        itemElement.draggable = true; 
		
        const randomWeight = Math.floor((Math.random() * (backpackCapacity / 2) + 1));
        const randomValue = Math.floor(Math.random() * 451) + 50;

        itemElement.innerHTML = `
            <div class="item-icon">${template.icon}</div>
            <div class="item-details">
                <strong>${template.name}</strong><br>
                –í–µ—Å: ${randomWeight} –∫–≥<br>
                –°—Ç–æ–∏–º–æ—Å—Ç—å: ${randomValue} üí≤
            </div>
        `;
        
        itemsPool.appendChild(itemElement);
    });
	setupDragAndDrop();
}

function setupDragAndDrop() {
    const items = document.querySelectorAll('.item');

    items.forEach(item => {
        item.addEventListener('dragstart', (event) => {
            event.dataTransfer.setData('text/plain', event.target.id);
        });
    });

    const dropzones = [itemsPool, backpack];

    dropzones.forEach(zone => {
        zone.addEventListener('dragover', (event) => {
            event.preventDefault();
        });

        zone.addEventListener('drop', (event) => {
            event.preventDefault();
            
            const id = event.dataTransfer.getData('text/plain');
            const draggableElement = document.getElementById(id);

            const dropzone = event.target.closest('.dropzone');
            if (dropzone) {
                dropzone.appendChild(draggableElement);
            }
        });
    });
}

function startLevel() {
    resultMessage.classList.add('hidden');
    nextLevelBtn.classList.add('hidden');
    checkBtn.classList.remove('hidden');

    const config = LEVEL_CONFIG[currentLevel - 1];
    backpackCapacity = config.capacity;

    levelTitle.textContent = `–£—Ä–æ–≤–µ–Ω—å ${currentLevel}`;
    capacitySpan.textContent = backpackCapacity;

    generateItems(config.numItems);
}

function showVictoryScreen() {
    gameContent.classList.add('hidden');
    checkBtn.classList.add('hidden');
    resultMessage.textContent = "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –ø—Ä–æ—à–ª–∏ –≤—Å–µ —É—Ä–æ–≤–Ω–∏!";
    resultMessage.classList.remove('hidden');
    startBtn.textContent = '–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ';
    startBtn.classList.remove('hidden');
}


startBtn.addEventListener('click', () => {
    intro.classList.add('hidden');
    startBtn.classList.add('hidden');
    gameContent.classList.remove('hidden');

    currentLevel = 1;
    startLevel();
});

checkBtn.addEventListener('click', () => {
    checkBtn.classList.add('hidden');

    if (currentLevel < LEVEL_CONFIG.length) {
        resultMessage.textContent = "–û—Ç–ª–∏—á–Ω–æ! –ì–æ—Ç–æ–≤ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏—Å–ø—ã—Ç–∞–Ω–∏—é?";
        resultMessage.classList.remove('hidden');
        nextLevelBtn.classList.remove('hidden');
    } else {
        showVictoryScreen();
    }
});

nextLevelBtn.addEventListener('click', () => {
    currentLevel++;
    startLevel();
});